using { /Fortnite.com/Devices }
using { /Fortnite.com/Game }
using { /Fortnite.com/Characters }
using { /Verse.org/Simulation }
using { /Verse.org/Random }
using { /UnrealEngine.com/Temporary/Diagnostics }
using { /UnrealEngine.com/Temporary/SpatialMath }

# See https://dev.epicgames.com/documentation/en-us/uefn/create-your-own-device-in-verse for how to create a verse device.

# A Verse-authored creative device that can be placed in a level
DBZ_Effect := class(creative_device):

    @editable
    SwitchDevice: switch_device = switch_device{}
    @editable
    VFX: vfx_spawner_device = vfx_spawner_device{}
   

    DoMoveStuff: logic = true

    var Location1:transform = transform{}


    # Runs when the device is started in a running game
    OnBegin<override>()<suspends>:void =
        SwitchDevice.TurnedOnEvent.Subscribe(SwitchON)
        
    SwitchON(P:agent):void=
        spawn:
            LeverTurnON(P)

    LeverTurnON( P : agent)<suspends>:void =
    
        if (F := P.GetFortCharacter[]):
        
            spawn: 
             MoveVFX(F)       
    
        
    MoveVFX( P :fort_character)<suspends>:void=
            
    
       loop: 
         PlayerPos := P.GetTransform().Translation
         VFXPos := VFX.GetTransform().Translation
         DistanceFromPlayer := Distance(PlayerPos, VFXPos)
         DirectionFreddyToPlayer := PlayerPos - VFXPos
         Angle := ArcTan(DirectionFreddyToPlayer.X, DirectionFreddyToPlayer.Y) - 3.14 / 2.0
         NewRotation := MakeRotation( vector3{ X := 0.0, Y := 0.0, Z := -1.0} , Angle) 
         VFX.MoveTo(PlayerPos, NewRotation, 0.01)
         
         


            
                

